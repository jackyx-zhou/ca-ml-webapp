{"version":3,"sources":["components/MainTextBox.jsx","components/TwoColumnsGrid.jsx","components/Home.jsx","components/MarginedContainer.jsx","components/ElemCA/ElemCARuleCell.jsx","components/ElemCA/ElemCAp5.js","components/ElemCA/ElemCARuleController.jsx","components/ElemCA/ElemCAtfjs.js","components/ElemCA/ElemCAML.jsx","components/ElemCA.jsx","components/GoL/GoL.js","components/GoL/GoLp5.js","components/GoL/GoLGridController.jsx","components/GoL/GoLtfjs.js","components/GoL/GoLML.jsx","components/GoL.jsx","components/Texture/TextureUploader.jsx","components/Texture/Texturetfjs.js","components/Texture/TextureML.jsx","components/Texture.jsx","helper/createVisor.js","App.js","reportWebVitals.js","index.js"],"names":["MainTextBox","props","Typography","component","variant","paragraph","Box","fontWeight","textAlign","px","py","children","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","TwoColumnsGrid","classes","className","Grid","container","item","xs","sm","Paper","left","right","Home","gutterBottom","alt","style","maxWidth","src","href","styled","Container","marginBottom","image","position","flexDirection","zIndex","ElemCARuleCell","onPic","process","id","offPic","cellToggle","toggle","ButtonBase","focusRipple","focusVisibleClassName","focusVisible","index","undefined","onClick","ElemCAp5","parent","ruleNum","n","p5","sketch","CA","this","w","Math","floor","width","cells","Array","i","length","generation","ruleset","toString","padStart","split","map","x","parseInt","generate","nextgen","me","rules","display","fill","noStroke","rect","a","b","c","ca","setup","createCanvas","offsetWidth","resizeCanvas","background","draw","height","windowResized","buttonIds","keys","reverse","ElemCARuleController","setRuleNum","useState","error","setError","toggles","setToggles","elemP5Parent","useRef","canvas","setCanvas","handleCellClick","event","t","currentTarget","newToggles","getAttribute","reduce","total","togglesToNum","MarginedContainer","TextField","label","type","value","onChange","input","target","isNaN","helperText","Button","remove","current","ref","trainXs","trainYs","model","caRuleNum","dispose","metrics","name","tab","fitCallbacks","tfvis","onEpochEnd","epoch","logs","stopTraining","Number","tf","fit","epochs","callbacks","ElemCAML","hiddenLayerUnits","setHiddenLayerUnits","setModel","isTraining","setIsTraining","modelP5Parent","surface1","surface2","surface3","open","justify","Slider","newValue","aria-labelledby","min","max","Input","margin","onBlur","inputProps","m","add","inputLayer","inputShape","dense","units","activation","optimizer","sgd","compile","loss","catf","modelSummary","layer","getLayer","predRule","predict","dataSync","console","log","then","disabled","ElemCA","GoL","cols","rows","countNeighbors","grid","y","sum","j","row","make2DArray","make2DArrayEmpty","randomInitialise","random","make2DArrayRandom","computeNext","next","state","neighbors","arr","GoLp5","cellWidth","staticGrid","gol","isRunning","s","frameRate","gray","strokeWeight","stroke","noFill","mouseClicked","clickedX","mouseX","clickedY","mouseY","mouseDragged","reset","GoLGridController","golp5","setGolp5","isp5Running","setisp5Running","golP5Parent","useEffect","g","PeriodicPaddingLayer","outputShape","kwargs","imageSide","shape","upper_pad","slice","lower_pad","partial_image","left_pad","right_pad","Layer","GoLtfjs","EXAMPLE_SIZE","IMAGE_SIZE","example","reshape","conv2d","filters","kernelSize","targetShape","adam","getModel","train","doPrediction","pred","GoLML","goltfjs","setGoltfjs","golMLp5","setgolMLp5","golMLp5Parent","predImage","arraySync","TextureUploader","textureImage","setTextureImage","uploadedImage","accept","file","files","reader","FileReader","onload","e","result","readAsDataURL","htmlFor","img_size","to_rgb","PerceptionLayer","angle","identity","dx","div","dy","kernel","mul","sub","expandDims","output","forEach","push","ImageOutputLayer","Texturetfjs","target_image","layer1","useBias","layer2","kernelInitializer","loss_log","TextureML","setTargetImage","texturetfjs","setTexturetfjs","fromPixels","resizeBilinear","toFloat","toPixels","textureSynth","Texture","createVisor","visor","el","close","drawerWidth","appBar","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","App","useTheme","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","preventDefault","edge","noWrap","Drawer","direction","Divider","List","ListItem","button","Link","to","ListItemIcon","ListItemText","primary","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5e1b78c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nexport default function MainTextBox(props) {\r\n    return (\r\n        <Typography component={'span'} variant='body1' paragraph>\r\n            <Box fontWeight=\"fontWeightMedium\" textAlign=\"left\" px=\"5%\" py=\"1%\">\r\n                {props.children}\r\n            </Box>\r\n        </Typography>\r\n    );\r\n}","\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nfunction TwoColumnsGrid(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={classes.paper}>\r\n          \r\n            {props.left}\r\n\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={classes.paper}>\r\n\r\n            {props.right}\r\n            \r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TwoColumnsGrid;","import React from \"react\";\r\nimport { Typography } from '@material-ui/core';\r\nimport MainTextBox from './MainTextBox';\r\nimport TwoColumnsGrid from './TwoColumnsGrid';\r\n\r\nexport default function Home() {\r\n  const left = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Cellular Automata</Typography>\r\n      <MainTextBox>\r\n        A cellular automaton is a collection of cells of a finite number of states (such as on\r\n        and off) on a grid of specified shape that evolves through a number of discrete time steps\r\n        according to a set of rules <em>based on the states of neighboring cells</em>.\r\n        The rules are then applied iteratively for as many time steps as desired.<br /><br/>\r\n\r\n        The concept was originally discovered in the 1940s by Stanislaw Ulam and John von Neumann.\r\n        It was not until the 1970s and Conway's Game of Life, a two-dimensional cellular automaton,\r\n        that interest in the subject expanded beyond academia.\r\n        In the 1980s, Stephen Wolfram engaged in a systematic study of one-dimensional cellular automata,\r\n        or what he calls elementary cellular automata;\r\n        his research assistant Matthew Cook showed that one of these rules is Turing-complete.\r\n        Wolfram published A New Kind of Science in 2002,\r\n        claiming that cellular automata have applications in many fields of science.\r\n      </MainTextBox>\r\n\r\n      <img alt=\"\" style={{ maxWidth: '100%' }} src='https://miro.medium.com/max/1024/1*pNLSLasaYXb9wgBPpGXZSw.gif' />\r\n    </>\r\n  )\r\n  const right = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Machine Learning</Typography>\r\n      <MainTextBox>\r\n        Machine learning is an application of artificial intelligence (AI) that provides systems the ability to automatically learn and improve from experience without being explicitly programmed. <br/>\r\n        <strong>\r\n          <br />\r\n          In this project, my main aim is to try and see if cellular automata of different scale (elementary/2-dimensional) and of different complexities (single/multi-channel) can be simulated and learned by various artificial neural networks architectures, thus exploring the relationships between these two kinds of self-evolving computational models.<br/>\r\n          <br/>\r\n        </strong>\r\n        The project has been heavily inspired by the paper <a href=\"https://distill.pub/2020/growing-ca/\">Growing Neural Cellular Automata</a> by researchers at Google and Allen Discovery Center. My ultimate aim is to try and create a simple texture synthesizer that can be trained and run with low hardware requirements using the model outlined in the Google paper.\r\n      </MainTextBox>\r\n      <img alt=\"\" style={{ maxWidth: '80%' }} src=\"https://miro.medium.com/max/3000/1*n3TBO5i8hrYAujlhiHoE_w.gif\" />\r\n    </>\r\n  )\r\n  return <TwoColumnsGrid left={left} right={right} />;\r\n}","import { styled } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default styled(Container)({\r\n    maxWidth: '100%',\r\n    marginBottom: 20,\r\n});","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ButtonBase, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: {\r\n        position: 'relative',\r\n        flexDirection: 'column',\r\n        '&:hover': {\r\n            zIndex: 1,\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function ElemCARuleCell(props) {\r\n    const onPic = process.env.PUBLIC_URL + '/caButtons/' + props.id + 'on.png';\r\n    const offPic = process.env.PUBLIC_URL + '/caButtons/' + props.id + 'off.png';\r\n    const cellToggle = props.toggle;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <ButtonBase\r\n            focusRipple\r\n            className={classes.image}\r\n            focusVisibleClassName={classes.focusVisible}\r\n            id={props.id}\r\n            index={props.index}\r\n            toggle={props.toggle ? 1 : undefined}\r\n            onClick={props.onClick}\r\n        >\r\n            <img src={cellToggle ? onPic : offPic} alt={props.id + \" state\"}/>\r\n            <br/>\r\n            <Typography variant=\"button\"> {cellToggle ? 1 : 0} </Typography>\r\n        </ButtonBase>\r\n    )\r\n} ","import p5 from 'p5';\r\n\r\nexport default function ElemCAp5(parent, ruleNum) {\r\n    const n = 64;\r\n    const s = (sketch) => {\r\n        function CA(ruleNum) {\r\n            this.w = Math.floor(sketch.width / n);\r\n            this.cells = new Array(n);\r\n            for (let i = 0; i < this.cells.length; i++) {\r\n                this.cells[i] = 0;\r\n            }\r\n            // We arbitrarily start with just the middle cell having a state of \"1\"\r\n            this.cells[this.cells.length / 2] = 1;\r\n            this.generation = 0;\r\n            this.ruleset = ruleNum.toString(2).padStart(8, '0').split('').map(x => parseInt(x));\r\n\r\n            this.generate = () => {\r\n                // First we create an empty array filled with 0s for the new values\r\n                var nextgen = [];\r\n                for (let i = 0; i < this.cells.length; i++) {\r\n                    nextgen[i] = 0;\r\n                }\r\n                // For every spot, determine new state by examing current state, and neighbor states\r\n                // Ignore edges that only have one neighor\r\n                for (let i = 1; i < this.cells.length - 1; i++) {\r\n                    var left = this.cells[i - 1];   // Left neighbor state\r\n                    var me = this.cells[i];     // Current state\r\n                    var right = this.cells[i + 1];   // Right neighbor state\r\n                    nextgen[i] = this.rules(left, me, right); // Compute next generation state based on ruleset\r\n                }\r\n                // The current generation is the new generation\r\n                this.cells = nextgen;\r\n                this.generation++;\r\n            };\r\n\r\n            this.display = function () {\r\n                for (var i = 0; i < this.cells.length; i++) {\r\n                    if (this.cells[i] === 1) sketch.fill(200);\r\n                    else sketch.fill(51);\r\n                    sketch.noStroke();\r\n                    sketch.rect(i * this.w, this.generation * this.w, this.w, this.w);\r\n                }\r\n            };\r\n\r\n            this.rules = function (a, b, c) {\r\n                if (a === 1 && b === 1 && c === 1) return this.ruleset[0];\r\n                if (a === 1 && b === 1 && c === 0) return this.ruleset[1];\r\n                if (a === 1 && b === 0 && c === 1) return this.ruleset[2];\r\n                if (a === 1 && b === 0 && c === 0) return this.ruleset[3];\r\n                if (a === 0 && b === 1 && c === 1) return this.ruleset[4];\r\n                if (a === 0 && b === 1 && c === 0) return this.ruleset[5];\r\n                if (a === 0 && b === 0 && c === 1) return this.ruleset[6];\r\n                if (a === 0 && b === 0 && c === 0) return this.ruleset[7];\r\n                return 0;\r\n            };\r\n        }\r\n        \r\n        let ca;\r\n        sketch.setup = () => {\r\n            sketch.createCanvas(0.8 * parent.offsetWidth, 0.8 * parent.offsetWidth);\r\n            ca = new CA(ruleNum);\r\n            sketch.resizeCanvas(n * ca.w, n * ca.w);\r\n            sketch.background(0);\r\n        };\r\n\r\n        sketch.draw = () => {\r\n            ca.display();\r\n            if (ca.generation < sketch.height / ca.w) {\r\n                ca.generate();\r\n            }\r\n        };\r\n\r\n        sketch.windowResized = () => {\r\n            sketch.resizeCanvas(0.8 * parent.offsetWidth, 0.8 * parent.offsetWidth);\r\n            ca = new CA(ruleNum);\r\n            sketch.resizeCanvas(n * ca.w, n * ca.w);\r\n            sketch.background(0);\r\n        }\r\n    };\r\n\r\n    let elemp5 = new p5(s, parent);\r\n    return elemp5;\r\n}","import React, { useState, useRef } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport MarginedContainer from '../MarginedContainer';\r\nimport ElemCARuleCell from './ElemCARuleCell';\r\nimport ElemCAp5 from './ElemCAp5'\r\n\r\nconst buttonIds = [...Array(8).keys()].reverse().map(x => {\r\n    return x.toString(2).padStart(3, '0');\r\n})\r\n\r\nconst numToToggles = (num) => {\r\n    const numList = num.toString(2).padStart(8, '0').split('');\r\n    return numList.map(x => !!parseInt(x));\r\n}\r\n\r\nconst togglesToNum = (toggles) => {\r\n    const t = [...toggles]\r\n    return t.reverse().reduce((total, t, i) => {\r\n        return total += t * 2 ** i;\r\n    }, 0);\r\n}\r\n\r\nexport default function ElemCARuleController(props) {\r\n    const ruleNum = props.ruleNum;\r\n    const setRuleNum = props.setRuleNum;\r\n    const [error, setError] = useState(false);\r\n    const [toggles, setToggles] = useState([...Array(8).fill(false)])\r\n    const elemP5Parent = useRef(null);\r\n    const [canvas, setCanvas] = useState(null);\r\n\r\n    const handleRuleNumChange = event => {\r\n        let input = event.target.value\r\n        \r\n        if (isNaN(input)) {\r\n            setError(true);\r\n        } else {\r\n            input = parseInt(input)\r\n            if (input < 0 || input > 255) setError(true);\r\n            else {\r\n                setError(false);\r\n                setRuleNum(input);\r\n                setToggles(numToToggles(input));\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCellClick = event => {\r\n        const t = event.currentTarget;\r\n        const newToggles = [...toggles];\r\n        newToggles[parseInt(t.getAttribute('index'))] = !t.getAttribute('toggle');\r\n\r\n        setToggles(newToggles);\r\n        setRuleNum(togglesToNum(newToggles));\r\n    }\r\n\r\n    const handleRenderButtonClick = event => {\r\n        if (canvas) canvas.remove();\r\n        setCanvas(ElemCAp5(elemP5Parent.current, ruleNum));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MarginedContainer>\r\n                {buttonIds.map((id, index) => (\r\n                    <ElemCARuleCell id={id}\r\n                        key={index}\r\n                        index={index}\r\n                        toggle={toggles[index] ? 1 : undefined}\r\n                        onClick={handleCellClick}>\r\n                    </ElemCARuleCell>\r\n                ))}\r\n            </MarginedContainer>\r\n\r\n            <MarginedContainer>\r\n                <TextField\r\n                    error={error}\r\n                    id=\"rule-num-inpput\"\r\n                    label=\"Rule Number\"\r\n                    type=\"number\"\r\n                    value={ruleNum}\r\n                    variant=\"outlined\"\r\n                    onChange={handleRuleNumChange}\r\n                    helperText={error ? \"Only number between 0 and 255 allowed!\" : \r\n                                        \"Suggestion: 30, 135, 193\"}\r\n                />\r\n            </MarginedContainer>\r\n            <MarginedContainer>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleRenderButtonClick}>\r\n                    Visualise\r\n                </Button>\r\n            </MarginedContainer>\r\n            <MarginedContainer ref={elemP5Parent} />\r\n        </>\r\n    )\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\n\r\nlet trainXs, trainYs;\r\n\r\ntrainXs = [...Array(8).keys()].reverse().map(x => {\r\n    return x.toString(2).padStart(3, '0');\r\n})\r\n\r\ntrainXs = trainXs.map(x => {\r\n    return x.split(\"\").map(Number);\r\n})\r\n\r\ntrainXs = tf.stack(trainXs);\r\n\r\nexport function getModel(hiddenLayerUnits) {\r\n    tf.disposeVariables();\r\n    const model = tf.sequential();\r\n    const INPUT_SIZE = 3;\r\n\r\n    model.add(tf.layers.inputLayer({ inputShape: [INPUT_SIZE] }));\r\n    if (hiddenLayerUnits > 0) {\r\n        model.add(tf.layers.dense({\r\n            units: hiddenLayerUnits,\r\n            activation: 'relu'\r\n        }));\r\n    }\r\n\r\n    model.add(tf.layers.dense({\r\n        units: 1,\r\n        activation: 'sigmoid'\r\n    }))\r\n    \r\n    // Choose an optimizer, loss function and accuracy metric,\r\n    // then compile and return the model\r\n    const optimizer = tf.train.sgd(0.2);\r\n    model.compile({\r\n        optimizer: optimizer,\r\n        loss: 'binaryCrossentropy',\r\n        metrics: ['accuracy'],\r\n    });\r\n\r\n    return model;\r\n}\r\n\r\nexport async function train(model, caRuleNum) {\r\n    if (trainYs) trainYs.dispose();\r\n    \r\n    const metrics = ['loss', 'acc'];\r\n    const container = {\r\n        name: 'Model Training', tab: '1D CA'\r\n    };\r\n    const fitCallbacks = {...tfvis.show.fitCallbacks(container, metrics,), \r\n        onEpochEnd: (epoch, logs) => {\r\n            if (logs['acc'] > 0.9) model.stopTraining = true;\r\n        }};\r\n\r\n    trainYs = caRuleNum.toString(2).padStart(8, '0').split(\"\").map(Number);\r\n    trainYs = tf.stack(trainYs);\r\n\r\n    return model.fit(trainXs, trainYs, {\r\n        epochs: 500,\r\n        callbacks: fitCallbacks\r\n    });\r\n}\r\n\r\nexport function doPrediction(model) {\r\n    return tf.tidy(() => {\r\n        let preds = model.predict(trainXs).dataSync();\r\n        return preds.map(x => Number(x > 0.5));\r\n    })\r\n}\r\n\r\n// async function showAccuracy(model, data) {\r\n//     const [preds, labels] = doPrediction(model, data);\r\n//     const classAccuracy = await tfvis.metrics.perClassAccuracy(labels, preds);\r\n//     const container = { name: 'Accuracy', tab: 'Evaluation' };\r\n//     tfvis.show.perClassAccuracy(container, classAccuracy, classNames);\r\n\r\n//     labels.dispose();\r\n// }\r\n\r\n// async function showConfusion(model, data) {\r\n//     const [preds, labels] = doPrediction(model, data);\r\n//     const confusionMatrix = await tfvis.metrics.confusionMatrix(labels, preds);\r\n//     const container = { name: 'Confusion Matrix', tab: 'Evaluation' };\r\n//     tfvis.render.confusionMatrix(container, { values: confusionMatrix, tickLabels: classNames });\r\n\r\n//     labels.dispose();\r\n// }\r\n","\r\nimport React, { useState, useRef } from \"react\";\r\nimport { Button, Typography, Slider, Input, Grid } from \"@material-ui/core\";\r\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\r\nimport * as catf from \"./ElemCAtfjs\";\r\n\r\nimport MarginedContainer from '../MarginedContainer';\r\nimport ElemCAp5 from './ElemCAp5'\r\n\r\nexport default function ElemCAML(props) {\r\n  const ruleNum = props.ruleNum;\r\n  const [hiddenLayerUnits, setHiddenLayerUnits] = useState(0);\r\n  const [model, setModel] = useState(null);\r\n  const [isTraining, setIsTraining] = useState(false);\r\n  const modelP5Parent = useRef(null);\r\n  const [canvas, setCanvas] = useState(null);\r\n\r\n  const surface1 = { name: 'Model summary', tab: '1D CA' };\r\n  const surface2 = { name: 'Hidden Layer Summary', tab: '1D CA' };\r\n  const surface3 = { name: 'Hidden Layer Summary Post Training', tab: '1D CA'}\r\n\r\n  const handleVisorButtonClick = event => {\r\n    tfvis.visor().open();\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    if (hiddenLayerUnits < 0) {\r\n      setHiddenLayerUnits(0);\r\n    } else if (hiddenLayerUnits > 32) {\r\n      setHiddenLayerUnits(32);\r\n    }\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setHiddenLayerUnits(newValue);\r\n  };\r\n\r\n  const handleInputChange = event => {\r\n    setHiddenLayerUnits(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBuildButtonClick = (event) => {\r\n    let m = catf.getModel(hiddenLayerUnits);\r\n    tfvis.show.modelSummary(surface1, m);\r\n    tfvis.show.layer(surface2, m.getLayer(undefined, 1));\r\n    tfvis.visor().open();\r\n    setModel(m);\r\n  };\r\n\r\n  const handleTrainModelButtonClick = event => {\r\n    catf.train(model, ruleNum).then(() => {\r\n      setIsTraining(false);\r\n      tfvis.show.layer(surface3, model.getLayer(undefined, 1));\r\n    });\r\n    tfvis.visor().open();\r\n    setIsTraining(true);\r\n  }\r\n\r\n  const handleStopTrainingButtonClick = event => {\r\n    model.stopTraining = true;\r\n    setIsTraining(false);\r\n    tfvis.show.layer(surface2, model.getLayer(undefined, 1));\r\n  }\r\n\r\n  const handleVisualiseModelButtonClick = (event) => {\r\n    let predRule = catf.doPrediction(model).reverse().reduce((total, t, i) => {\r\n      return total += t * 2 ** i;\r\n    }, 0);\r\n    console.log(predRule);\r\n    if (canvas) canvas.remove();\r\n    setCanvas(ElemCAp5(modelP5Parent.current, predRule));\r\n  }\r\n  return (\r\n    <>\r\n      <MarginedContainer>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleVisorButtonClick}>\r\n          Show tensorflow board\r\n        </Button>\r\n      </MarginedContainer>\r\n      <MarginedContainer>\r\n        <Typography id=\"hidden-unit-slider\" gutterBottom>\r\n          Units in hidden layer\r\n        </Typography>\r\n        <Grid container spacing={2} justify=\"center\">\r\n          <Grid item>\r\n            <Slider\r\n              value={typeof hiddenLayerUnits === 'number' ? hiddenLayerUnits : 0}\r\n              onChange={handleSliderChange}\r\n              aria-labelledby=\"hidden-unit-slider\"\r\n              style={{ width: 64 }}\r\n              min={0}\r\n              max={32}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Input\r\n              value={hiddenLayerUnits}\r\n              margin=\"dense\"\r\n              onChange={handleInputChange}\r\n              onBlur={handleBlur}\r\n              inputProps={{\r\n                min: 0,\r\n                max: 32,\r\n                type: 'number',\r\n                'aria-labelledby': 'hidden-unit-slider',\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleBuildButtonClick}>\r\n              Build Model\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </MarginedContainer>\r\n      {\r\n        model ? \r\n        <MarginedContainer>\r\n            <Grid container spacing={2} justify=\"center\">\r\n              <Grid item>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleVisualiseModelButtonClick}>\r\n                  Visualise\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button variant=\"contained\" color=\"primary\" \r\n                        onClick={handleTrainModelButtonClick}\r\n                        disabled={isTraining}>\r\n                  Train Model\r\n                </Button>\r\n              </Grid>\r\n              {\r\n                isTraining ? \r\n                <Grid item>\r\n                  <Button variant=\"contained\" color=\"secondary\"\r\n                    onClick={handleStopTrainingButtonClick}>\r\n                    Stop training\r\n                  </Button>\r\n                </Grid> : null\r\n              }\r\n             \r\n            </Grid>\r\n        </MarginedContainer> : null\r\n      }\r\n      <MarginedContainer ref={modelP5Parent}>\r\n        <></>\r\n      </MarginedContainer>\r\n    </>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nimport TwoColumnsGrid from './TwoColumnsGrid';\r\n// import MarginedContainer from './MarginedContainer';\r\nimport ElemCARuleController from './ElemCA/ElemCARuleController';\r\nimport ElemCAML from './ElemCA/ElemCAML';\r\nimport MainTextBox from \"./MainTextBox\";\r\n\r\nexport default function ElemCA() {\r\n  const [ruleNum, setRuleNum] = useState(0);\r\n\r\n  const left = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Elementary CA</Typography>\r\n      <MainTextBox>\r\n        <a href='https://www.cantorsparadise.com/elementary-cellular-automaton-e27e3d1008d9'>Wolfram's elementary cellular automata</a> are one-dimensional, constructed with two possible values for each cell (0 or 1),\r\n        and rules that depend only on itself and the nearest neighbor values.<br/>\r\n        Below is a simple demo you can play around with different rule set by either clicking on individual rule cells or input the rule number directly. The top row in the grid is initialised with only the middle cell \"on\", and every row below is 1 timestep after evolving from its row above. \r\n      </MainTextBox>\r\n      <ElemCARuleController ruleNum={ruleNum} setRuleNum={setRuleNum} />\r\n    </>\r\n  )\r\n  const right = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Multi-layer Perceptron</Typography>\r\n      <MainTextBox>\r\n        In this simple demo, we use a simple multilayer perceptron model to learn the CA update rule. Notice this problem is a non-linearly separable problem like the XOR problem, so if there's no hidden layer (hidden layer units slider set to 0), the single output perceptron would not be able to converge to a solution.<br/>\r\n        You can play around and build models, change hyperparameters, and train the model to learn the CA rule you have specified on the CA side. Compare the visualisation result before and after the training is complete.\r\n      </MainTextBox>\r\n      <img alt=\"mlp model\" style={{ maxWidth: '80%' }} src='https://ars.els-cdn.com/content/image/1-s2.0-S2405656118301020-gr1.jpg'></img>\r\n      <ElemCAML ruleNum={ruleNum}/>\r\n    </>\r\n  )\r\n  return <TwoColumnsGrid left={left} right={right} />;\r\n}","export default function GoL(n) {\r\n    let cols = n;\r\n    let rows = n;\r\n    this.grid = make2DArrayEmpty(cols, rows);\r\n\r\n    this.randomInitialise = () => {\r\n        this.grid = make2DArrayRandom(cols, rows);\r\n    }\r\n\r\n    this.computeNext = () => {\r\n        let next = make2DArray(cols, rows);\r\n\r\n        // Compute next based on grid\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                let state = this.grid[i][j];\r\n                // Count live neighbors!\r\n                let neighbors = countNeighbors(this.grid, i, j);\r\n\r\n                if (state === 0 && neighbors === 3) {\r\n                    next[i][j] = 1;\r\n                } else if (state === 1 && (neighbors < 2 || neighbors > 3)) {\r\n                    next[i][j] = 0;\r\n                } else {\r\n                    next[i][j] = state;\r\n                }\r\n\r\n            }\r\n        }\r\n        this.grid = next;\r\n    }\r\n\r\n    function countNeighbors(grid, x, y) {\r\n        let sum = 0;\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let col = (x + i + cols) % cols;\r\n                let row = (y + j + rows) % rows;\r\n                sum += grid[col][row];\r\n            }\r\n        }\r\n        sum -= grid[x][y];\r\n        return sum;\r\n    }\r\n}\r\n\r\nfunction make2DArray(cols, rows) {\r\n    let arr = new Array(cols);\r\n    for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = new Array(rows);\r\n    }\r\n    return arr;\r\n}\r\n\r\nfunction make2DArrayEmpty(cols, rows) {\r\n    let grid = make2DArray(cols, rows);\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            grid[i][j] = 0;\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction make2DArrayRandom(cols, rows) {\r\n    let grid = make2DArray(cols, rows);\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            grid[i][j] = Math.floor(Math.random() * 2);\r\n        }\r\n    }\r\n    return grid;\r\n}","import p5 from 'p5';\r\nimport GoL from \"./GoL\"\r\n\r\nexport default function GoLp5(parent, staticGrid=null) {\r\n    const n = 28;\r\n    const cols = n, rows = n;\r\n    let cellWidth;\r\n\r\n    if (!staticGrid) {\r\n        this.gol= new GoL(n);\r\n    }\r\n    this.isRunning = false;\r\n\r\n    const s = (sketch) => {\r\n        sketch.setup = () => {\r\n            sketch.createCanvas(0.6 * parent.offsetWidth, 0.6 * parent.offsetWidth);\r\n            cellWidth = sketch.width / n;\r\n            sketch.resizeCanvas(n * cellWidth, n * cellWidth);\r\n            sketch.background(0);\r\n            sketch.frameRate(15);\r\n        };\r\n\r\n        sketch.draw = () => {\r\n            sketch.background(255);\r\n            for (let i = 0; i < cols; i++) {\r\n                for (let j = 0; j < rows; j++) {\r\n                    let x = i * cellWidth;\r\n                    let y = j * cellWidth;\r\n                    if (!staticGrid) {\r\n                        if (this.gol.grid[i][j] === 1) {\r\n                            sketch.fill(0);\r\n                            sketch.noStroke();\r\n                        } else {\r\n                            sketch.noFill();\r\n                            sketch.strokeWeight(2);\r\n                            sketch.stroke(0);\r\n                        }\r\n                    } else {\r\n                        const gray = 255 - sketch.map(staticGrid[i][j], 0, 1, 0, 255)\r\n                        sketch.fill(gray);\r\n                        sketch.strokeWeight(0.5);\r\n                        sketch.stroke(128)\r\n                    }\r\n                    sketch.rect(x, y, cellWidth, cellWidth);\r\n                }\r\n            }\r\n\r\n            if (this.isRunning) {\r\n                this.gol.computeNext();\r\n            }\r\n        }\r\n\r\n        sketch.mouseClicked = () => {\r\n            if (!this.isRunning && !staticGrid) {\r\n                let clickedX = Math.floor(sketch.mouseX / cellWidth)\r\n                let clickedY =  Math.floor(sketch.mouseY / cellWidth)\r\n                if (clickedX > 0 && clickedX < rows && clickedY > 0 && clickedY < cols) {\r\n                    // Flip between 0 and 1\r\n                    this.gol.grid[clickedX][clickedY] = 1 - this.gol.grid[clickedX][clickedY];\r\n                }\r\n            }\r\n        }\r\n\r\n        sketch.mouseDragged = () => {\r\n            if (!this.isRunning && !staticGrid) {\r\n                let clickedX = Math.floor(sketch.mouseX / cellWidth)\r\n                let clickedY =  Math.floor(sketch.mouseY / cellWidth)\r\n                if (clickedX > 0 && clickedX < rows && clickedY > 0 && clickedY < cols) {\r\n                    this.gol.grid[clickedX][clickedY] = 1;\r\n                }\r\n            }\r\n        }\r\n        sketch.windowResized = () => {\r\n            sketch.createCanvas(0.6 * parent.offsetWidth, 0.6 * parent.offsetWidth);\r\n            cellWidth = sketch.width / n;\r\n            sketch.resizeCanvas(n * cellWidth, n * cellWidth);\r\n            sketch.background(0);\r\n        }\r\n    };\r\n\r\n    this.p5 = new p5(s, parent);\r\n\r\n    this.reset = () => {\r\n        this.gol = new GoL(n);\r\n    }\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport MarginedContainer from '../MarginedContainer';\r\nimport GoLp5 from './GoLp5'\r\n\r\nexport default function GoLGridController(props) {\r\n    const golp5 = props.golp5;\r\n    const setGolp5 = props.setGolp5;\r\n    const isp5Running = props.isp5Running;\r\n    const setisp5Running = props.setisp5Running;\r\n    const golP5Parent = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setGolp5(g => g ? g : new GoLp5(golP5Parent.current));\r\n    }, [])\r\n\r\n    const handleResetButtonClick = event => {\r\n        golp5.reset();\r\n    }\r\n\r\n    const handleInitialiseButtonClick = event => {\r\n        golp5.gol.randomInitialise();\r\n    }\r\n\r\n    const handlePauseButtonClick = event => {\r\n        golp5.isRunning = !golp5.isRunning;\r\n        setisp5Running(golp5.isRunning);\r\n    }\r\n\r\n    const handleStepButtonClick = event => {\r\n        if (isp5Running) {\r\n            golp5.isRunning = false;\r\n            setisp5Running(golp5.isRunning);\r\n        }\r\n        golp5.gol.computeNext();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MarginedContainer ref={golP5Parent} />\r\n            <MarginedContainer>\r\n                <Grid container spacing={2} justify=\"center\">\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleResetButtonClick}>\r\n                            Reset\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleInitialiseButtonClick}>\r\n                            Random\r\n                        </Button>\r\n                    </Grid>           \r\n                </Grid>\r\n            </MarginedContainer>\r\n            <MarginedContainer>                \r\n                {\r\n                    golp5 ? \r\n                    <Grid container spacing={2} justify=\"center\">\r\n                        <Grid item>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handlePauseButtonClick}>\r\n                            {isp5Running? \"Pause\" : \"Run\" }\r\n                        </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleStepButtonClick}>\r\n                            Step\r\n                        </Button>\r\n                        </Grid>           \r\n                    </Grid> : null\r\n                }\r\n            </MarginedContainer>\r\n        </>\r\n    )\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport GoL from './GoL';\r\n\r\nclass PeriodicPaddingLayer extends tf.layers.Layer {\r\n    constructor() {\r\n        super({});\r\n    }\r\n\r\n    computeOutputShape(inputShape) {\r\n        const outputShape = [...inputShape]\r\n        outputShape[1] += 2;\r\n        outputShape[2] += 2;\r\n        return outputShape;\r\n    }\r\n\r\n    call(input, kwargs) {\r\n        input = input[0]\r\n\r\n        const imageSide = input.shape[1];\r\n        const upper_pad = input.slice([0, imageSide-1, 0], [-1, 1, -1]);\r\n        const lower_pad = input.slice([0, 0, 0], [-1, 1, -1]);\r\n        const partial_image = tf.concat([upper_pad, input, lower_pad], 1);\r\n        const left_pad = partial_image.slice([0, 0, imageSide-1], [-1, -1, 1]);\r\n        const right_pad = partial_image.slice([0, 0, 0], [-1, -1, 1]);\r\n        const padded_image = tf.concat([left_pad, partial_image, right_pad], 2);\r\n        return padded_image; \r\n    }\r\n\r\n    getClassName() { return 'PeriodicPadding'}\r\n}\r\n\r\nexport default function GoLtfjs() {\r\n    const EXAMPLE_SIZE = 100;\r\n    const IMAGE_SIZE = 28;\r\n\r\n    this.trainXs = new Array(EXAMPLE_SIZE);\r\n    this.trainYs = new Array(EXAMPLE_SIZE);\r\n    for (let i = 0; i < EXAMPLE_SIZE; i++) {\r\n        let example = new GoL(IMAGE_SIZE);\r\n        example.randomInitialise();\r\n        this.trainXs[i] = example.grid;\r\n        example.computeNext();\r\n        this.trainYs[i] = example.grid;\r\n    }\r\n    this.trainXs = tf.tensor(this.trainXs).reshape([EXAMPLE_SIZE, IMAGE_SIZE, IMAGE_SIZE, 1]);\r\n    this.trainYs = tf.tensor(this.trainYs).reshape([EXAMPLE_SIZE, IMAGE_SIZE * IMAGE_SIZE, 1]);\r\n\r\n    this.model = getModel();\r\n    this.isTraining = false;\r\n\r\n    this.train = () => {\r\n        const metrics = ['loss', 'acc'];\r\n        const container = {\r\n            name: 'Model Training', tab: 'Game of Life'\r\n        };\r\n        const fitCallbacks = {\r\n            ...tfvis.show.fitCallbacks(container, metrics,),\r\n            onEpochEnd: (epoch, logs) => {\r\n                if (logs['loss'] < 0.05) this.model.stopTraining = true;\r\n            }\r\n        };\r\n\r\n        return this.model.fit(this.trainXs, this.trainYs, {\r\n            epochs: 100,\r\n            callbacks: fitCallbacks\r\n        });\r\n    }\r\n\r\n    this.doPrediction= (image) => {\r\n        return tf.tidy(() => {\r\n            image = tf.tensor2d(image).reshape([1, IMAGE_SIZE, IMAGE_SIZE, 1])\r\n            let pred = this.model.predict(image);\r\n            pred = pred.reshape([IMAGE_SIZE, IMAGE_SIZE])\r\n            return pred;\r\n        })\r\n    }\r\n\r\n    function getModel() {\r\n        tf.disposeVariables();\r\n        const model = tf.sequential();\r\n    \r\n        model.add(tf.layers.inputLayer({ inputShape: [IMAGE_SIZE, IMAGE_SIZE, 1] }));\r\n        model.add(new PeriodicPaddingLayer());\r\n        model.add(tf.layers.conv2d({\r\n            filters: 10,\r\n            kernelSize: 3,\r\n            padding: 'valid',\r\n            activation: 'relu',\r\n        }));\r\n    \r\n        model.add(tf.layers.reshape({\r\n            targetShape: [-1, 10]\r\n        }))\r\n        model.add(tf.layers.dense({\r\n            units: 20,\r\n            activation: 'relu'\r\n        }))\r\n        model.add(tf.layers.dense({\r\n            units: 1,\r\n            activation: 'sigmoid'\r\n        }))\r\n    \r\n        // Choose an optimizer, loss function and accuracy metric,\r\n        // then compile and return the model\r\n        const optimizer = tf.train.adam(1e-2);\r\n        model.compile({\r\n            optimizer: optimizer,\r\n            loss: 'binaryCrossentropy',\r\n            metrics: ['accuracy'],\r\n        });\r\n    \r\n        return model;\r\n    }\r\n\r\n}\r\n\r\n// async function showAccuracy(model, data) {\r\n//     const [preds, labels] = doPrediction(model, data);\r\n//     const classAccuracy = await tfvis.metrics.perClassAccuracy(labels, preds);\r\n//     const container = { name: 'Accuracy', tab: 'Evaluation' };\r\n//     tfvis.show.perClassAccuracy(container, classAccuracy, classNames);\r\n\r\n//     labels.dispose();\r\n// }\r\n\r\n// async function showConfusion(model, data) {\r\n//     const [preds, labels] = doPrediction(model, data);\r\n//     const confusionMatrix = await tfvis.metrics.confusionMatrix(labels, preds);\r\n//     const container = { name: 'Confusion Matrix', tab: 'Evaluation' };\r\n//     tfvis.render.confusionMatrix(container, { values: confusionMatrix, tickLabels: classNames });\r\n\r\n//     labels.dispose();\r\n// }\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\r\n\r\nimport MarginedContainer from '../MarginedContainer';\r\nimport GoLtfjs from \"./GoLtfjs\";\r\nimport GoLp5 from \"./GoLp5\";\r\n\r\nexport default function GoLML(props) {\r\n  const golp5 = props.golp5;\r\n  const setisp5Running = props.setisp5Running;\r\n\r\n  const [goltfjs, setGoltfjs] = useState(null);\r\n  const [isTraining, setIsTraining] = useState(false);\r\n  const [golMLp5, setgolMLp5] = useState(null);\r\n  const golMLp5Parent = useRef(null);\r\n\r\n  const surface1 = { name: 'Model summary', tab: 'Game of Life' };\r\n  const surface2 = { name: 'Hidden Layer Summary', tab: 'Game of Life' };\r\n  // const surface3 = { name: 'Hidden Layer Summary Post Training', tab: 'Game of Life'}\r\n\r\n  useEffect(() => {\r\n    const gol = new GoLtfjs();\r\n    setGoltfjs(gol);\r\n    tfvis.show.modelSummary(surface1, gol.model);\r\n  }, [])\r\n\r\n  const handleVisorButtonClick = event => {\r\n    tfvis.visor().open();\r\n  }\r\n\r\n  const handleShowDatasetClick = (event) => {\r\n    console.log(goltfjs.trainXs);\r\n  }\r\n\r\n  const handleTrainModelButtonClick = event => {\r\n    goltfjs.train();\r\n    tfvis.visor().open();\r\n    setIsTraining(true);\r\n  }\r\n\r\n  const handleStopTrainingButtonClick = event => {\r\n    goltfjs.model.stopTraining = true;\r\n    setIsTraining(false);\r\n    tfvis.show.layer(surface2, goltfjs.model.getLayer(undefined, 2));\r\n  }\r\n\r\n  const handlePredictButtonClick = event => {\r\n    golp5.isTraining = false;\r\n    setisp5Running(false);\r\n    let predImage = goltfjs.doPrediction(golp5.gol.grid);\r\n    predImage = predImage.arraySync()\r\n    if (golMLp5) golMLp5.p5.remove()\r\n    setgolMLp5(new GoLp5(golMLp5Parent.current, predImage));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MarginedContainer>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleVisorButtonClick}>\r\n          Show tensorflow board\r\n        </Button>\r\n      </MarginedContainer>\r\n\r\n      <MarginedContainer>\r\n          <Grid container spacing={2} justify=\"center\">\r\n            <Grid item>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleShowDatasetClick}>\r\n                Generate training data\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button variant=\"contained\" color=\"primary\" \r\n                      onClick={handleTrainModelButtonClick}\r\n                      disabled={isTraining}>\r\n                Train Model\r\n              </Button>\r\n            </Grid>\r\n            {\r\n              isTraining ? \r\n              <Grid item>\r\n                <Button variant=\"contained\" color=\"secondary\"\r\n                  onClick={handleStopTrainingButtonClick}>\r\n                  Stop training\r\n                </Button>\r\n              </Grid> : null\r\n            }\r\n            \r\n          </Grid>\r\n      </MarginedContainer>\r\n      <MarginedContainer>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handlePredictButtonClick}>\r\n          Predict Next Step\r\n        </Button>\r\n      </MarginedContainer>\r\n      <MarginedContainer ref={golMLp5Parent} />\r\n    </>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TwoColumnsGrid from './TwoColumnsGrid';\r\nimport MainTextBox from './MainTextBox';\r\nimport GoLGridController from './GoL/GoLGridController';\r\nimport GoLML from './GoL/GoLML';\r\n\r\nexport default function GoL() {\r\n  const [golp5, setGolp5] = useState(null);\r\n  const [isp5Running, setisp5Running] = useState(false);\r\n\r\n  const left = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Conway's Game of Life</Typography>\r\n      <MainTextBox>\r\n        <a href='https://mathworld.wolfram.com/GameofLife.html'>Conway's Game of Life</a> is a two-dimensional cellular automaton, invented by John H. Conway and popularized in Martin Gardner's Scientific American column starting in October 1970.<br/>\r\n        <b><em>RULES</em></b><br/>\r\n        For a space that is populated:<br/>\r\n        1. Each cell with one or no neighbors dies, as if by solitude.<br/>\r\n        2. Each cell with four or more neighbors dies, as if by overpopulation.<br/>\r\n        3. Each cell with two or three neighbors survives.<br/>\r\n        For a space that is empty or unpopulated:<br/>\r\n        Each cell with three neighbors becomes populated.<br/>\r\n        <br/>\r\n        Below is a simple demo you can play around with by clicking on each cell on the grid to populate or empty it. You can click run to let the game plays out till a stable state is reached, or you can click step to let it run one step at a time. Try making some of the listed patterns below and see how it evolves!\r\n      </MainTextBox>\r\n      <GoLGridController \r\n        golp5={golp5}\r\n        setGolp5={setGolp5}\r\n        isp5Running={isp5Running}\r\n        setisp5Running={setisp5Running}\r\n      />\r\n      <img alt=\"\" style={{ maxWidth: '60%' }} src='https://img.itch.zone/aW1nLzIxNTk1NTYucG5n/original/nS1Wxk.png' />\r\n    </>\r\n  )\r\n\r\n  const right = (\r\n    <>\r\n      <Typography variant='h4' gutterBottom>Convolutional Neural Network</Typography>\r\n      <MainTextBox>\r\n        <a href='https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53'>Convolutional neural network</a>  applies a series of local convolutions via a trainable “kernel” to an input multichannel image. The same kernel is applied to all pixels in the image, and each convolutional layer consolidates information within a fixed local radius of each pixel in the input image depending on the kernel size.<br/>\r\n        The primary analogy between cellular automata and traditional convolutional neural networks arises from (1) the locality of the dynamics, and (2) simultaneous temporal updating of all spatial points.\r\n        The single-neighborhood rule operator in CA can, in this way, be implemented as a convolutional operator as part of a CNN, allowing it to be applied synchronously to all pixel neighborhoods in an input image.<br/>\r\n        <br/>\r\n        Below is an example implementation of an in-browser convolutional neural network. You can train it and then use it to predict the next step of the grid on the other panel with darker color indicating more confidence. Use the step button on the other side to verify the correctness of the prediction.\r\n      </MainTextBox>\r\n      <img src={process.env.PUBLIC_URL + '/convolution.png'} style={{ maxWidth: '100%' }} alt=\"convolution diagram\"/>\r\n      <GoLML\r\n        golp5={golp5}\r\n        setisp5Running={setisp5Running}\r\n      />\r\n    </>\r\n  )\r\n  return <TwoColumnsGrid left={left} right={right}/>;\r\n}","import { Button } from \"@material-ui/core\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport MarginedContainer from \"../MarginedContainer\";\r\n\r\nexport default function TextureUploader(props) {\r\n    const textureImage = props.textureImage;\r\n    const setTextureImage = props.setTextureImage;\r\n    const uploadedImage = props.uploadedImage;\r\n\r\n    const handleFileUpload = event => {\r\n        const file = event.target.files[0];\r\n        console.log(file);\r\n        if (file) {\r\n            setTextureImage(file);\r\n            const reader = new FileReader();\r\n            const {current} = uploadedImage;\r\n            current.file = file;\r\n            reader.onload = (e) => {\r\n                current.src = e.target.result;\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MarginedContainer>\r\n            <input\r\n                accept=\"image/*\"\r\n                id=\"contained-button-file\"\r\n                type=\"file\"\r\n                onChange={handleFileUpload}\r\n            />\r\n            <label htmlFor=\"contained-button-file\">\r\n                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                    Upload\r\n                </Button>\r\n            </label>\r\n            </MarginedContainer>\r\n            <img alt=\"\" style={{ width: 448 }} ref={uploadedImage} />\r\n        </>\r\n    )\r\n}","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\n\r\nconst img_size = 128;\r\nconst channel_n = 12\r\nconst hidden_n = 96\r\nconst lr = 2e-3\r\n\r\n// const fire_rate = 0.5\r\n// const batch_size = 4\r\n// const pool_size = 1024\r\n// const fixed_seed = 123 \r\n// const lr_decay = 2000\r\n// const rollout_len_min = 32\r\n// const rollout_len_max = 64\r\n// const train_steps = 2000\r\n// const gradnorm = true\r\n// const q = 2.0\r\n// const bias = true\r\n// const learned_filters = 0\r\n// const laplacian = true\r\n// const gradient = true\r\n// const identity = true\r\n\r\nconst seef_fn = (n) => {\r\n    return tf.zeros([n, img_size, img_size, channel_n])\r\n}\r\n\r\nconst loss_fn = (y_pred, y_true) => {\r\n    return tf.mean(tf.square(to_rgb(y_pred).sub(y_true)));\r\n}\r\n\r\nconst to_rgb = (x) => {\r\n    return tf.slice(x, [0, 0, 0, 0], [-1, -1,-1, 3]);\r\n}\r\n\r\nclass PerceptionLayer extends tf.layers.Layer {\r\n    constructor(angle= 0.0) {\r\n        super({});\r\n        this.angle = angle;\r\n    }\r\n\r\n    computeOutputShape(inputShape) {\r\n        const outputShape = [...inputShape]\r\n        outputShape[3] = 3 * channel_n;\r\n        console.log(outputShape)\r\n        return outputShape;\r\n    }\r\n\r\n    call(input, kwargs) {\r\n        return tf.tidy(() => {\r\n            const identity = tf.outerProduct([0, 1, 0], [0, 1, 0]);\r\n            const dx = tf.outerProduct([1, 2, 1], [-1, 0, 1]).div(tf.scalar(8.0))\r\n            const dy = tf.transpose(dx);\r\n            // let laplacian = tf.outerProduct([1, 2, 1], [1, 2, 1]).div(tf.scalar(8.0))\r\n            // laplacian = laplacian.buffer().set()\r\n            const [c, s] = [tf.cos(this.angle), tf.sin(this.angle)]\r\n            let kernel = tf.stack([identity, c.mul(dx).sub(s.mul(dy)), s.mul(dx).add(c.mul(dy))], -1)\r\n            // Add filters for every channel and hidden channel\r\n            kernel = kernel.expandDims(2);\r\n            kernel = tf.tile(kernel, [1, 1, channel_n, 1])\r\n\r\n            input = input[0]\r\n            let output = []\r\n            tf.unstack(input).forEach(x => {\r\n                const y = tf.depthwiseConv2d(x, kernel, 1, 'same');\r\n                output.push(y)\r\n            })\r\n            return tf.stack(output);\r\n        })\r\n    }\r\n\r\n    getClassName() { return 'Perception' }\r\n}\r\n\r\nclass ImageOutputLayer extends tf.layers.Layer {\r\n    constructor() {\r\n        super({});\r\n    }\r\n\r\n    call(input, kwargs) {\r\n        console.log(input[0])\r\n        return to_rgb(input[0]);\r\n    }\r\n\r\n    computeOutputShape(inputShape) {\r\n        const outputShape = [...inputShape]\r\n        outputShape[3] = 3;\r\n        console.log(outputShape)\r\n        return outputShape;\r\n    }\r\n\r\n    getClassName() { return 'ImageOutput' }\r\n}\r\n\r\nclass SamplePool {\r\n    constructor(_parent=null, _parent_idx=null, pool_slots) {\r\n        this._parent = _parent;\r\n        this._parent_idx = _parent_idx;\r\n        this._slot_names = pool_slots.keys()\r\n        this._size = null\r\n\r\n        for (const [k, v] of Object.entries(pool_slots)) {\r\n            if (this._size === null) {\r\n                this._size = v.shape[0]\r\n            }\r\n            if (this._size !== v.shape[0]) throw 'assertion failed'\r\n            this[k] = v;\r\n        }\r\n    }\r\n\r\n    // sample(n) {\r\n    //     let idx = _und.sample([...Array(self._size).keys()], n)\r\n    //     let batch = {}\r\n    //     for (k in this._slot_names) {\r\n    //         batch[k] = this[k][idx];\r\n    //     }\r\n    //     batch = SamplePool(this, idx, batch)\r\n    //     return batch\r\n    // }\r\n}\r\n\r\nexport default function Texturetfjs(target_image) {\r\n    // this.pool = new SamplePool(null, null, {x: seed_fn(pool_size)})\r\n    this.model = getModel();\r\n    this.loss_log = [];\r\n    this.isTraining = false;\r\n\r\n    let trainXs = seef_fn(1);\r\n    let trainYs = target_image.expandDims(0);\r\n    this.train = () => {\r\n        const metrics = ['loss'];\r\n        const container = {\r\n            name: 'Model Training', tab: 'Texture Synth'\r\n        };\r\n\r\n        const fitCallbacks = {\r\n            ...tfvis.show.fitCallbacks(container, metrics,),\r\n        };\r\n\r\n        return this.model.fit(trainXs, trainYs, {\r\n            epochs: 1000,\r\n            callbacks: fitCallbacks\r\n        });\r\n    }\r\n\r\n    function getModel() {\r\n        tf.disposeVariables();\r\n        // const init_fn = tf.initializers.glorotNormal();\r\n        let layer1 = tf.layers.conv2d({\r\n            filters: hidden_n,\r\n            kernelSize: 1,\r\n            padding: 'valid',\r\n            activation: 'relu',\r\n            useBias: true,\r\n        });\r\n\r\n        let layer2 = tf.layers.conv2d({\r\n            filters: channel_n,\r\n            kernelSize: 1,\r\n            padding: 'valid',\r\n            activation: null,\r\n            kernelInitializer: 'zeros',\r\n        });\r\n        \r\n        // function perceiveLayer(x, angle=0.0) {\r\n        //     return tf.tidy((x) => {\r\n        //         const angle = 0.0;\r\n        //         const identity = tf.outerProduct([0, 1, 0], [0, 1, 0]);\r\n        //         const dx = tf.outerProduct([1, 2, 1], [-1, 0, 1]).div(tf.scalar(8.0))\r\n        //         const dy = tf.transpose(dx);\r\n        //         // let laplacian = tf.outerProduct([1, 2, 1], [1, 2, 1]).div(tf.scalar(8.0))\r\n        //         // laplacian = laplacian.buffer().set()\r\n        //         const [c, s] = [tf.cos(angle), tf.sin(angle)]\r\n        //         let kernel = tf.stack([identity, c.mul(dx).sub(s.mul(dy)), s.mul(dx).add(c.mul(dy))], -1)\r\n        //         // Add filters for every channel and hidden channel\r\n        //         kernel = kernel.expandDims(2);\r\n        //         kernel = tf.tile(kernel, [1, 1, channel_n, 1])\r\n        //         y = tf.depthwiseConv2d(x, kernel, 1, 'same');\r\n        //         return y;\r\n        //     })\r\n        // }\r\n\r\n        const model = tf.sequential();\r\n        model.add(tf.layers.inputLayer({ inputShape: [img_size, img_size, channel_n] }));\r\n        model.add(new PerceptionLayer(0.0));\r\n        model.add(layer1);\r\n        model.add(layer2);\r\n        model.add(new ImageOutputLayer())\r\n    \r\n        // Choose an optimizer, loss function and accuracy metric,\r\n        // then compile and return the model\r\n        const optimizer = tf.train.adam(lr);\r\n        model.compile({\r\n            optimizer: optimizer,\r\n            loss: 'meanSquaredError',\r\n        });\r\n    \r\n        return model;\r\n    }\r\n\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\r\n\r\nimport MarginedContainer from \"../MarginedContainer\";\r\nimport Texturetfjs from\"./Texturetfjs\";\r\n\r\nexport default function TextureML(props) {\r\n    const uploadedImage = props.uploadedImage;\r\n    const [targetImage, setTargetImage] = useState(null);\r\n    const [texturetfjs, setTexturetfjs] = useState(null);\r\n    const [isTraining, setIsTraining] = useState(false);\r\n    const canvas = useRef(null);\r\n\r\n    const surface1 = { name: 'Model summary', tab: 'Texture Synth' };\r\n\r\n    const handleRenderButtonClick = event => {\r\n        if (uploadedImage.current.src) {\r\n            // console.log(uploadedImage)\r\n            let image = tf.browser.fromPixels(uploadedImage.current)\r\n                            .resizeBilinear([128, 128]).toFloat()\r\n                            .div(tf.scalar(255));\r\n            setTargetImage(image);\r\n            console.log(image);\r\n            tf.browser.toPixels(image, canvas.current)\r\n\r\n            const textureSynth = new Texturetfjs(image);\r\n            setTexturetfjs(textureSynth);\r\n            tfvis.show.modelSummary(surface1, textureSynth.model);\r\n        }\r\n    }\r\n\r\n    const handleVisorButtonClick = event => {\r\n        tfvis.visor().open();\r\n    }\r\n\r\n    const handleTrainButtonClick = event => {\r\n        texturetfjs.train();\r\n        tfvis.visor().open();\r\n        setIsTraining(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // const angle = 0.0;\r\n        // const identity = tf.outerProduct([0, 1, 0], [0, 1, 0]);\r\n        // const dx = tf.outerProduct([1, 2, 1], [-1, 0, 1]).div(tf.scalar(8.0))\r\n        // const dy = tf.transpose(dx);\r\n        // // let laplacian = tf.outerProduct([1, 2, 1], [1, 2, 1]).div(tf.scalar(8.0))\r\n        // // laplacian = laplacian.buffer().set()\r\n        // const [c, s] = [tf.cos(angle), tf.sin(angle)]\r\n        // let kernel = tf.stack([identity, c.mul(dx).sub(s.mul(dy)), s.mul(dx).add(c.mul(dy))], -1)\r\n        // kernel = kernel.expandDims(2);\r\n        // kernel = tf.tile(kernel, [1, 1, 12, 1])\r\n        // console.log(kernel);\r\n        // console.log(tf.zeros([1024, 128, 128, 12]).shape[0]);\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <MarginedContainer>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleVisorButtonClick}>\r\n          Show tensorflow board\r\n        </Button>\r\n      </MarginedContainer>\r\n        <MarginedContainer>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleRenderButtonClick}>\r\n                Preprocess Image\r\n            </Button>\r\n        </MarginedContainer>\r\n        <MarginedContainer>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleTrainButtonClick}>\r\n                Train Model\r\n            </Button>\r\n        </MarginedContainer>\r\n        <canvas ref={canvas}/>\r\n        </>\r\n    );\r\n}","import React, { useState, useRef } from \"react\";\r\nimport TwoColumnsGrid from \"./TwoColumnsGrid\";\r\nimport TextureUploader from \"./Texture/TextureUploader\"\r\nimport TextureML from \"./Texture/TextureML\"\r\n\r\nexport default function Texture() {\r\n  const [textureImage, setTextureImage] = useState(null);\r\n  const uploadedImage = useRef(null);\r\n  const left = (\r\n    <>\r\n      <TextureUploader \r\n        textureImage={textureImage} \r\n        setTextureImage={setTextureImage}\r\n        uploadedImage = {uploadedImage}\r\n      />\r\n    </>\r\n  )\r\n\r\n  const right = (\r\n    <>\r\n      <TextureML \r\n        uploadedImage = {uploadedImage}\r\n      />\r\n    </>\r\n  )\r\n  return <TwoColumnsGrid left={left} right={right}/>;\r\n}","import * as tfvis from '@tensorflow/tfjs-vis';\r\n\r\nexport default function createVisor() {\r\n    const visor = tfvis.visor();\r\n    visor.el.style.position = \"absolute\";\r\n    visor.el.style.zIndex = 2000;\r\n    visor.el.children[0].style.maxWidth=\"100%\";\r\n    visor.close();\r\n}","import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport LooksOneIcon from '@material-ui/icons/LooksOne';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport TextureIcon from '@material-ui/icons/Texture';\r\n\r\nimport { Route, Switch, Link } from \"react-router-dom\";\r\nimport { Home, ElemCA, GoL, Texture } from \"./components\";\r\nimport { createVisor } from './helper';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(createVisor);\r\n\r\n    const handleDrawerOpen = (e) => {\r\n        e.preventDefault();\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = (e) => {\r\n        e.preventDefault();\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        CA-ML Webapp Demo\r\n          </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n\r\n                <List>\r\n                    <ListItem button key=\"Intro\" component={Link} to=\"/\">\r\n                        <ListItemIcon> <InfoIcon /> </ListItemIcon>\r\n                        <ListItemText primary=\"Introduction\" />\r\n                    </ListItem>\r\n                    <ListItem button key=\"elementary\" component={Link} to=\"/elementary\">\r\n                        <ListItemIcon> <LooksOneIcon /> </ListItemIcon>\r\n                        <ListItemText primary=\"Elementary CA\" />\r\n                    </ListItem>\r\n                    <ListItem button key=\"gol\" component={Link} to=\"/gol\">\r\n                        <ListItemIcon> <BugReportIcon /> </ListItemIcon>\r\n                        <ListItemText primary=\"Game of Life\" />\r\n                    </ListItem>\r\n                    <ListItem button key=\"texture_synthesis\" component={Link} to=\"/texture\">\r\n                        <ListItemIcon> <TextureIcon /> </ListItemIcon>\r\n                        <ListItemText primary=\"Texture Synthesis\" />\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={() => <Home />} />\r\n                    <Route exact path=\"/elementary\" component={() => <ElemCA />} />\r\n                    <Route exact path=\"/gol\" component={() => <GoL />} />\r\n                    <Route exact path=\"/texture\" component={() => <Texture />} />\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { HashRouter as Router } from 'react-router-dom'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}